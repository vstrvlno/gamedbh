import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from story import chapter1, chapter2, chapter3, chapter4, chapter5

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
players = {}

# -------------------------------
# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π
# -------------------------------
def role_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß¨ –£—á—ë–Ω—ã–π", callback_data="role_–£—á—ë–Ω—ã–π")],
        [InlineKeyboardButton(text="ü™ñ –°–æ–ª–¥–∞—Ç", callback_data="role_–°–æ–ª–¥–∞—Ç")],
        [InlineKeyboardButton(text="üßç –í—ã–∂–∏–≤—à–∏–π", callback_data="role_–í—ã–∂–∏–≤—à–∏–π")]
    ])
    return kb


# -------------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
# -------------------------------
async def send_step(chat_id, player, step_func):
    text, options = step_func(player)
    buttons = [[InlineKeyboardButton(text=o["text"], callback_data=o["goto"])] for o in options]
    await bot.send_message(chat_id, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


# -------------------------------
# /start
# -------------------------------
@dp.message()
async def cmd_start(message: types.Message):
    players[message.from_user.id] = {"step": 0, "role": None}
    await message.answer(
        "üåÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥.\n\n"
        "–¢—ã —Å—Ç–æ–∏—à—å —Å—Ä–µ–¥–∏ –ø–µ–ø–ª–∞ –∏ —Ä—É–∏–Ω. –ù–æ —É —Ç–µ–±—è –µ—Å—Ç—å —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å—ë.\n"
        "–í—ã–±–µ—Ä–∏, –∫–µ–º —Ç—ã –±—É–¥–µ—à—å:",
        reply_markup=role_keyboard()
    )


# -------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
# -------------------------------
@dp.callback_query(lambda c: c.data.startswith("role_"))
async def choose_role(callback: types.CallbackQuery):
    role = callback.data.split("_")[1]
    player = players.get(callback.from_user.id, {"step": 0})
    player["role"] = role
    player["step"] = 1
    players[callback.from_user.id] = player
    await callback.message.edit_text(f"–¢—ã –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: *{role}*.\n\n–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...", parse_mode="Markdown")
    await asyncio.sleep(1)
    await send_step(callback.message.chat.id, player, chapter1.play)


# -------------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–æ–≤
# -------------------------------
@dp.callback_query(lambda c: c.data.startswith("goto_"))
async def handle_step(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    player = players.get(user_id)

    if not player:
        await callback.message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏ —Å /start.")
        return

    step = callback.data.split("_")[1]

    if step == "ch2":
        await send_step(callback.message.chat.id, player, chapter2.play)
    elif step == "ch3":
        await send_step(callback.message.chat.id, player, chapter3.play)
    elif step == "ch4":
        await send_step(callback.message.chat.id, player, chapter4.play)
    elif step == "ch5":
        chapter5.play_chapter5(player)
    elif step == "end":
        await callback.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥.")


# -------------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------------
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
