import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from story import story  # –∏–º–ø–æ—Ä—Ç —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏

# -----------------------------------------------------
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
players = {}

# -----------------------------------------------------
# üéÆ –§—É–Ω–∫—Ü–∏–∏
# -----------------------------------------------------
async def send_story(message_or_callback, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    state = players.get(user_id)
    if not state:
        return

    current = state["current"]
    status = state["status"]

    # –ü—Ä–æ–∏–≥—Ä—ã—à
    if current == 0:
        text = "üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n\n–ü—Ä–∏—á–∏–Ω–∞: " + state.get("reason", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
        await message_or_callback.answer(text)
        state["status"] = "lost"
        return

    # –ü–æ–±–µ–¥–∞
    if current == -1:
        await message_or_callback.answer("üèÜ –ü–æ–±–µ–¥–∞! –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        state["status"] = "finished"
        return

    event = story.get(current)
    if not event:
        await message_or_callback.answer("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.")
        state["status"] = "finished"
        return

    text = f"<b>{event['text']}</b>"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    for key, choice in event.get("choices", {}).items():
        btn_text = f"{key.upper()}: {choice['text']}"
        button = InlineKeyboardButton(text=btn_text, callback_data=key)
        keyboard.inline_keyboard.append([button])

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard)


# -----------------------------------------------------
# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
# -----------------------------------------------------
@dp.message(Command("start"))
async def start_game(message: types.Message):
    user_id = message.from_user.id
    players[user_id] = {"current": 1, "status": "playing"}
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!\n\n–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –ø—É—Ç—å –≤—ã–∂–∏–≤—à–µ–≥–æ –≤ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.")
    await send_story(message, user_id)


# -----------------------------------------------------
# ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
# -----------------------------------------------------
@dp.callback_query(F.data)
async def handle_choice(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    state = players.get(user_id)

    if not state or state["status"] != "playing":
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start.")
        return

    current = state["current"]
    event = story.get(current)
    if not event:
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    data = callback.data.lower()
    if data not in event["choices"]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    next_step = event["choices"][data]["next"]
    reason = event["choices"][data].get("reason")

    if next_step == 0:
        state["reason"] = reason or "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
    state["current"] = next_step

    await send_story(callback, user_id)
    await callback.answer()


# -----------------------------------------------------
# ‚ñ∂Ô∏è –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# -----------------------------------------------------
async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
