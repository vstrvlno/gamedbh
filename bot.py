import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

from story import story  # –∏–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render ‚Üí Environment.")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_progress = {}  # {user_id: scene_name}


# === –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ ===
def create_choice_keyboard(choices, include_nav=False):
    keyboard = InlineKeyboardMarkup()
    for choice in choices:
        keyboard.add(InlineKeyboardButton(choice["text"], callback_data=choice["next"]))
    if include_nav:
        keyboard.row(
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="intro"),
            InlineKeyboardButton("üìú –ú–æ—è –≥–ª–∞–≤–∞", callback_data="current"),
        )
    return keyboard


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
async def send_scene(event, user_id, scene_name):
    scene = story.get(scene_name)
    if not scene:
        await event.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å üåå")
        return

    user_progress[user_id] = scene_name

    text = f"<b>{scene['title']}</b>\n\n{scene['text']}"
    keyboard = create_choice_keyboard(scene.get("choices", []), include_nav=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
    if isinstance(event, types.CallbackQuery):
        await event.message.edit_text(text, reply_markup=keyboard)
        await event.answer()
    else:
        await event.answer(text, reply_markup=keyboard)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–≥—Ä—É!\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å.")
    await send_scene(message, user_id, "intro")


# === –ö–æ–º–∞–Ω–¥–∞ /admin ===
@dp.message(Command("admin"))
async def admin_handler(message: types.Message):
    if str(message.from_user.id) == str(ADMIN_ID):
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞. –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query(F.data)
async def handle_choice(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    if data == "current":
        current = user_progress.get(user_id, "intro")
        await send_scene(callback, user_id, current)
        return

    await send_scene(callback, user_id, data)


# === HTTP endpoint –¥–ª—è Render (—á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–∞–¥–∞–ª) ===
async def healthcheck(request):
    return web.Response(text="Bot is running!")


def setup_webhook():
    app = web.Application()
    app.router.add_get("/", healthcheck)
    return app


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    logging.basicConfig(level=logging.INFO)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    app = setup_webhook()

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
