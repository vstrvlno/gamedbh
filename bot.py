import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

from story import story  # —Å–ª–æ–≤–∞—Ä—å —Å—Ü–µ–Ω: { "intro": {"title": "...", "text": "...", "choices":[{"text":"...", "next":"..."}]} }

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render ‚Üí Environment.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_progress: dict[int, str] = {}

def create_choice_keyboard(choices, include_nav=False) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    for choice in choices:
        # callback_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤
        kb.add(InlineKeyboardButton(choice["text"], callback_data=str(choice["next"])))
    if include_nav:
        kb.row(
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="intro"),
            InlineKeyboardButton("üìú –ú–æ—è –≥–ª–∞–≤–∞", callback_data="current"),
        )
    return kb

async def send_scene(event, user_id: int, scene_name: str):
    scene = story.get(scene_name)
    logger.info("Send scene %s to user %s: %s", scene_name, user_id, bool(scene))

    if not scene:
        # –¥–ª—è callback –∏—Å–ø–æ–ª—å–∑—É–µ–º answer, –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî reply
        if isinstance(event, types.CallbackQuery):
            await event.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å üåå")
        else:
            await event.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å üåå")
        return

    user_progress[user_id] = scene_name

    text = f"<b>{scene.get('title','')}</b>\n\n{scene.get('text','')}"
    keyboard = create_choice_keyboard(scene.get("choices", []), include_nav=True)

    # –µ—Å–ª–∏ —ç—Ç–æ callback ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(event, types.CallbackQuery):
        try:
            await event.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            logger.warning("Edit failed, sending new message: %s", e)
            await bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
        await event.answer()
    else:
        # event ‚Äî Message
        await bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–≥—Ä—É!\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å.")
    await send_scene(message, user_id, "intro")

@dp.message(Command("admin"))
async def admin_handler(message: types.Message):
    if str(message.from_user.id) == str(ADMIN_ID):
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞. –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@dp.callback_query(F.data)
async def handle_choice(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data
    logger.info("Callback from %s: %s", user_id, data)

    if data == "current":
        current = user_progress.get(user_id, "intro")
        await send_scene(callback, user_id, current)
        return

    # –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if data not in story and data != "intro" and data != "current":
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏–ª–∏ —Å—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    await send_scene(callback, user_id, data)

# HTTP healthcheck –¥–ª—è Render
async def healthcheck(request):
    return web.Response(text="Bot is running!")

def setup_webhook():
    app = web.Application()
    app.router.add_get("/", healthcheck)
    return app

async def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app = setup_webhook()

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
