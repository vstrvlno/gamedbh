import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
from story import story

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –Ω–∞ Render")

# === –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Aiogram 3.7+) ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()

# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===
user_progress = {}  # {user_id: scene_name}


# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def create_choice_keyboard(choices):
    keyboard = InlineKeyboardMarkup()
    for choice in choices:
        keyboard.add(InlineKeyboardButton(choice["text"], callback_data=choice["next"]))
    return keyboard


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ü–µ–Ω—ã ===
async def send_scene(message_or_callback, user_id, scene_name):
    scene = story.get(scene_name)
    if not scene:
        await message_or_callback.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞ üåå")
        return

    user_progress[user_id] = scene_name

    text = f"<b>{scene['title']}</b>\n\n{scene['text']}"
    keyboard = create_choice_keyboard(scene.get("choices", []))

    if isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=keyboard)
        await message_or_callback.answer()
    else:
        await message_or_callback.answer(text, reply_markup=keyboard)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await send_scene(message, message.from_user.id, "intro")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query()
async def handle_choice(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    next_scene = callback.data
    await send_scene(callback, user_id, next_scene)


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    logging.basicConfig(level=logging.INFO)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
