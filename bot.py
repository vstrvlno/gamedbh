import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from dotenv import load_dotenv
from story import story  # ‚úÖ –∏–º–ø–æ—Ä—Ç —Ç–≤–æ–µ–≥–æ story.py

# ----------------------------
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ----------------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
players = {}

# ----------------------------
# üéÆ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
# ----------------------------
@dp.message(Command("start"))
async def start_game(message: types.Message):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
    user_id = message.from_user.id
    players[user_id] = {"current": 1, "status": "playing"}

    intro_text = (
        "üåÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–†–∞–∑—Ä—É—à–µ–Ω–Ω—ã–π –ì–æ—Ä–æ–¥</b>.\n\n"
        "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π ‚Äî –º–∏—Ä –ø–æ—Å–ª–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –¥–æ–±—ã—Ç—å –≤–∞–∫—Ü–∏–Ω—É –∏ –≤—ã–∂–∏—Ç—å.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß† –£—á—ë–Ω—ã–π", callback_data="role_scientist")],
        [InlineKeyboardButton(text="‚öîÔ∏è –°–æ–ª–¥–∞—Ç", callback_data="role_soldier")],
        [InlineKeyboardButton(text="üíâ –ú–µ–¥–∏–∫", callback_data="role_medic")],
        [InlineKeyboardButton(text="üïµÔ∏è –†–∞–∑–≤–µ–¥—á–∏–∫", callback_data="role_scout")]
    ])
    await message.answer(intro_text, reply_markup=keyboard)


@dp.callback_query()
async def handle_choice(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤"""
    user_id = callback.from_user.id

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å
    if callback.data.startswith("role_"):
        role = callback.data.split("_")[1]
        players[user_id] = {
            "current": 1,
            "status": "playing",
            "role": role
        }
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: <b>{role.capitalize()}</b>.\n\n"
            "–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è..."
        )
        await send_story(callback.message, user_id)
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    if user_id not in players or players[user_id]["status"] != "playing":
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    current_state = players[user_id]["current"]
    event = story.get(current_state)

    if not event:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—é–∂–µ—Ç–∞. –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è.")
        players[user_id]["status"] = "finished"
        await callback.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    choice_key = callback.data
    if choice_key not in event.get("choices", {}):
        await callback.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤—ã–±–æ—Ä.")
        return

    next_step = event["choices"][choice_key]["next"]
    players[user_id]["current"] = next_step

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if next_step == 0:
        await callback.message.answer("üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ò—Å—Ç–æ—Ä–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞.")
        players[user_id]["status"] = "lost"
        await callback.answer()
        return

    if next_step == -1:
        await callback.message.answer("üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é!")
        players[user_id]["status"] = "finished"
        await callback.answer()
        return

    # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    await send_story(callback.message, user_id)
    await callback.answer()


async def send_story(message: types.Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ü–µ–Ω—ã"""
    state = players[user_id]
    current = state["current"]

    if current not in story:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.")
        state["status"] = "finished"
        return

    event = story[current]
    text = f"üìñ <b>–°—Ü–µ–Ω–∞ {current}</b>\n\n{event['text']}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for key, choice in event.get("choices", {}).items():
        btn_text = choice["text"]
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=key)])

    await message.answer(text, reply_markup=keyboard)


# ----------------------------
# üåê Webhook –∏–ª–∏ Polling (Render-friendly)
# ----------------------------
async def main():
    logging.basicConfig(level=logging.INFO)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
